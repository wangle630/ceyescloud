#!/usr/bin/env node
var config=require("../config.js");
var args = process.argv.slice(2);
setUp(args);
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('doracms:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '8099');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log("listening on port "+port)
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var io = app.io;
io.attach( server );

function setUp(args) {
  if(args.length<=1){
    checkConfig();
    return;
  }
  otherSet(args);
  checkConfig();
}
function checkConfig(){
  if(config.db_ip==""||config.db_port==""||config.db_user==""
      ||config.db_password==""||config.db_database==""||config.SERVICE_CODE==""
      ||config.API_KEY==""||config.redis_port=="" ||config.locate==""
      ||config.BASE_URL==""||config.uri_txt==""||config.uri_audio==""
      ||config.uri_task==""||config.uri_rtmp==""||config.download_link==""
  ){
    console.error('parameter is empty!!!!');
    console.error('please run *.sh');
    console.error('if you need change the config ');
    console.error('maybe you need type : ');
    console.error('forever start -a -l forever.log -o out.log -e err.log bin/www db_ip=? db_user=? db_password=? db_database=? db_port=? SERVICE_CODE=? API_KEY=? redis_port=? locate=? BASE_URL=? uri_txt=? uri_audio=? uri_task=? uri_rtmp=? config.download_link=?');
    process.exit(1);
  }
}

function otherSet(args){
  for (var i = 0; i < args.length; i++) {
    if (args[i].indexOf("=") > 0) {
      var kv = args[i].split("=");
      if (kv.length != 2) {
        console.log('invalid args : ' + args[i]);
        return;
      }
      switch (kv[0]) {
        case "db_ip":
          if (kv[1].indexOf(":") > 0) {
            var ipport = kv[1].split(":");
            config.db_ip = ipport[0];
            config.db_port = ipport[1];
          } else {
            config.db_ip = kv[1];
          }
          break;
        case "db_port":
          config.db_port = kv[1];
          break;
        case "db_user":
          config.db_user = kv[1];
          break;
        case "db_password":
          config.db_password = kv[1];
          break;
        case "db_database":
          config.db_database = kv[1];
          break;
        case "SERVICE_CODE":
          config.SERVICE_CODE = kv[1];
          break;
        case "API_KEY":
          config.API_KEY = kv[1];
          break;
        case "redis_port":
          config.redis_port = kv[1];
          break;
        case "locate":
          config.locate = kv[1];
          break;
        case "BASE_URL":
          config.BASE_URL = kv[1];
          break;
        case "uri_txt":
          config.uri_txt = kv[1];
          break;
        case "uri_audio":
          config.uri_audio = kv[1];
          break;
        case "uri_task":
          config.uri_task = kv[1];
          break;
        case "uri_rtmp":
          config.uri_rtmp = kv[1];
          break;
        case "reg_switch":
          config.reg_switch = kv[1];
          break;
        case "PARAM_LEN":
          config.PARAM_LEN = kv[1];
          break;
        case "download_link":
          config.download_link = kv[1];
          break;

      }
    }
  }
}
